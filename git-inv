#!/usr/bin/env python3

"""
Maintain a list of Git repositories in a `.gitinv` file, with each line representing one repository.
Format each line with the path and origin URL, separated by space(s). Use `git inv clone` to clone
any missing repositories, and `git inv <command>` to execute a specified command across all listed
repositories.

Running `git inv` alone will display repositories in the current directory and its subdirectories.
The `.gitinv` file is searched starting from the current directory and proceeds upwards through
parent directories.

Refer to the code below for icon meanings.
"""

from os.path import dirname, isdir, isfile, join, realpath, relpath
from subprocess import run
from sys import argv, exit, stderr

repos = []
parent = realpath(".")
while True:
    gitinv = join(parent, ".gitinv")
    if isfile(gitinv):
        for line in open(gitinv, encoding="utf-8"):
            path, origin = line.split()
            rel = relpath(join(parent, path))
            if rel.startswith(".."):
                continue
            repos.append({
                "path": rel,
                "isdir": isdir(rel),
                "isgit": isfile(join(rel, ".git", "config")),
                "origin": origin
            })
        break
    if parent == "/":
        break
    parent = dirname(parent)
if not repos:
    exit()
icon_x = "\033[1;31m✗\033[0m" # missing
icon_q = "\033[1;35m?\033[0m" # exists, but not git
icon_e = "\033[1;33m!\033[0m" # origin mismatch
icon_c = "\033[1;32m✓\033[0m" # all ok
for repo in repos:
    cmd = None
    if len(argv) > 1:
        if argv[1] == "clone":
            if not repo["isdir"] and not repo["isgit"]:
                cmd = ["git", "clone", repo["origin"], repo["path"]]
        elif repo["isgit"]:
            cmd = ["git", "-C", repo["path"]] + argv[1:]
        else:
            continue
    if cmd:
        print("\033[7m{}\033[0m".format(repo["path"]))
        run(cmd)
    else:
        icon = icon_x
        branch = None
        if repo["isdir"]:
            icon = icon_q
            if repo["isgit"]:
                origin = run(["git", "-C", repo["path"], "config", "--get", "remote.origin.url"], capture_output=True, text=True).stdout.strip()
                branch = run(["git", "-C", repo["path"], "branch", "--show-current"], capture_output=True, text=True).stdout.strip()
        print(
            icon_c if origin == repo["origin"] else icon_e,
            repo["path"],
            "\033[1;37m{}\033[0m".format(branch) if branch not in(None, "main", "master") else ""
        )
